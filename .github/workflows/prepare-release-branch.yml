name: Prepare release branch
on:
  workflow_dispatch:
    inputs:
      prerelease_version:
        description: "Pre-release version number"
        required: True
      feature_branch:
        description: "Branch for release"
        required: True

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install toml
        run: pip install toml

  prereqs:
    needs: setup
    environment: GITHUB 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify prerequisites
        env:
          PRERELEASE_VERSION: ${{ github.event.inputs.prerelease_version }}
        run: |
          if [[ $GITHUB_REF_NAME != main ]]; then
            echo this workflow should only be run against main
            exit 1
          fi
          
          if ! grep --quiet "^## Unreleased$" CHANGELOG.md; then
            echo the change log is missing an \"Unreleased\" section
            exit 1
          fi
          chmod +x ./scripts/eachdist.py
          if [[ ! -z $PRERELEASE_VERSION ]]; then
            stable_version=$(./scripts/eachdist.py version --mode stable)
            stable_version=${stable_version//.dev/}
            if [[ $PRERELEASE_VERSION != ${stable_version}* ]]; then
              echo "$PRERELEASE_VERSION is not a prerelease for the version on main ($stable_version)"
              exit 1
            fi
          fi

  create-pull-request-against-release-branch:
    needs: [setup, prereqs]
    environment: GITHUB 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create release branch
        env:
          PRERELEASE_VERSION: ${{ github.event.inputs.prerelease_version }}
        run: |
          chmod +x ./scripts/eachdist.py

          if [[ -z $PRERELEASE_VERSION ]]; then
            stable_version=$(./scripts/eachdist.py version --mode stable)
            stable_version=${stable_version//.dev/}
          else
            stable_version=$PRERELEASE_VERSION
          fi

          unstable_version=$(./scripts/eachdist.py version --mode prerelease)
          unstable_version=${unstable_version//.dev/}

          if [[ $stable_version =~ ^([0-9]+)\.([0-9]+)\.0$ ]]; then
            stable_version_branch_part=$(echo $stable_version | sed -E 's/([0-9]+)\.([0-9]+)\.0/\1.\2.x/')
            unstable_version_branch_part=$(echo $unstable_version | sed -E 's/0\.([0-9]+)b0/0.\1bx/')
            release_branch_name="release/v${stable_version_branch_part}-${unstable_version_branch_part}"
          elif [[ $stable_version =~ ^([0-9]+)\.([0-9]+)\.0 ]]; then
            # pre-release version, e.g. 1.9.0rc2
            release_branch_name="release/v$stable_version-$unstable_version"
          else
            echo "unexpected version: $stable_version"
            exit 1
          fi

          git push origin HEAD:$release_branch_name

          git push origin HEAD:$release_branch_name

          echo "STABLE_VERSION=$stable_version"

          echo "RELEASE_BRANCH_NAME=$release_branch_name"
